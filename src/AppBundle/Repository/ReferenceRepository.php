<?php

namespace AppBundle\Repository;

use AppBundle\Entity\Search;
use Doctrine\ORM\Query\Expr\Join;

/**
 * ReferenceRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ReferenceRepository extends \Doctrine\ORM\EntityRepository
{
    public function search(Search $search) {
        $query = $this->createQueryBuilder("r");

        $query
            ->join("r.conference","c");

        $searching = false;

        if ($search->getConference() !== null) {
            dump($search->getConference());
            $searching = true;
            $query
                ->andWhere("LOWER(c.code) LIKE :conf")
                ->orWhere("LOWER(c.name) LIKE :conf")
                ->setParameter("conf", "%" . mb_strtolower($search->getConference()) . "%");
        }

        if ($search->getLocation() !== null) {
            $searching = true;
            $query->andWhere("LOWER(c.location) LIKE :location")
                ->setParameter("location", "%" . mb_strtolower($search->getLocation()) . "%");
        }

        if ($search->getDate() !== null) {
            $searching = true;
            $query->andWhere("LOWER(c.year) LIKE :year")
                ->setParameter("year", "%" . mb_strtolower($search->getDate()) . "%");
        }

        if ($search->getPaperId() !== null) {
            $searching = true;
            $query->andWhere("LOWER(r.paperId) LIKE :paperId")
                ->setParameter("paperId", "%" . mb_strtolower($search->getPaperId()) . "%");
        }

        if ($search->getTitle() !== null) {
            $searching = true;
            $query->andWhere("LOWER(r.title) LIKE :title")
                ->setParameter("title", "%" . mb_strtolower($search->getTitle()) . "%");
        }
        if ($search->getAuthor() !== null) {
            $i = 0;
            foreach ($search->getAuthor() as $author) {
                $query->andWhere("0 < (SELECT COUNT(a$i.id) FROM AppBundle:Author a$i INNER JOIN a$i.references ar$i WHERE ar$i.id = r.id AND a$i = :author$i)")
                    ->setParameter("author$i", $author);
                $i++;
            }
            $searching = true;
        }

        if ($searching == false) {
            return [];
        }


        return $query;
    }

}
