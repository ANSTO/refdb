{% extends 'base.html.twig' %}


{% block javascripts %}
   {{ parent() }}

   <script>
       $("form").submit(function() {
          triggerSearch();
          return false;
       });

      var adjustedText = false;
      var date = new Date();
      var lastInput = date.getTime();
      var lastSearch = date.getTime();
      var searchContent;

      datasources['conference'] = new Bloodhound({
         datumTokenizer: Bloodhound.tokenizers.whitespace,
         queryTokenizer: Bloodhound.tokenizers.whitespace,
         remote: {
            url: Routing.generate('conference_search', { 'query': 'query' }),
            wildcard: 'query',
            transform: function(data) {
               return data;
            }
         },
         limit: 20
      });

      datasources['conference_date'] = new Bloodhound({
         datumTokenizer: Bloodhound.tokenizers.whitespace,
         queryTokenizer: Bloodhound.tokenizers.whitespace,
         remote: {
            url: Routing.generate('conference_search', { 'query': 'query', 'type': 'date' }),
            wildcard: 'query',
            transform: function(data) {
               return data;
            }
         },
         limit: 20
      });

      datasources['conference_location'] = new Bloodhound({
         datumTokenizer: Bloodhound.tokenizers.whitespace,
         queryTokenizer: Bloodhound.tokenizers.whitespace,
         remote: {
            url: Routing.generate('conference_search', { 'query': 'query', 'type': 'location' }),
            wildcard: 'query',
            transform: function(data) {
               return data;
            }
         },
         limit: 20
      });

      $(".conference-typeahead").typeahead({
                 hint: true,
                 highlight: true,
                 minLength: 1
              },
              {
                 limit: 20,
                 name: 'conference_search',
                 displayKey: 'code',
                 templates: {
                    suggestion: function(data) {
                       return '<p><strong>[' + data.code + ']</strong> ' + data.name + '</p>';
                    },
                 },
                 valueKey: 'id',
                 source: datasources['conference']
              }).on('typeahead:selected', function(evt, item) {
         $(".conference-date-typeahead").val(item.date);
         $(".conference-location-typeahead").val(item.location);
      });

      $(".conference-date-typeahead").typeahead({
                 hint: true,
                 highlight: true,
                 minLength: 1
              },
              {
                 limit: 20,
                 name: 'conference_date',
                 displayKey: 'date',
                 valueKey: 'id',
                 source: datasources['conference_date']
              });

      $(".conference-location-typeahead").typeahead({
                 hint: true,
                 highlight: true,
                 minLength: 1
              },
              {
                 limit: 20,
                 name: 'conference_location',
                 displayKey: 'location',
                 valueKey: 'id',
                 source: datasources['conference_location']
              });


      $("form input").on("keyup", function(){
         if ($("form").serialize() !== searchContent) {
            adjustedText = true;
         }
         date = new Date();
         lastInput = date.getTime();
      }).on("change", function(){
         if ($("form").serialize() !== searchContent) {
            adjustedText = true;
         }
         date = new Date();
         lastInput = date.getTime();
      }).on("blur", function(){
         if ($("form").serialize() !== searchContent) {
            adjustedText = true;
         }
         date = new Date();
         lastInput = date.getTime();
      });

      setInterval(function() {
         date = new Date();
         if (adjustedText && (date.getTime() - lastInput > 600) && (date.getTime() - lastSearch > 600)) {
            triggerSearch();
         }
      },200);

      function triggerSearch() {
         adjustedText = false;
         lastSearch = date.getTime();
         $("#searching").toggle(true);
         $("#no-results").toggle(false);
         $("#results").empty();
         searchContent = $("form").serialize();
         $.post(Routing.generate('search'), searchContent, function(content){
            $("#searching").toggle(false);
            var results = $("#results");
            results.empty();
            $.each(content, function(key,item) {
               results.append("<li><a href='" + Routing.generate("reference_show", {"id": item.id }) + "'>" + item.name + "</a></li>");
            });
            $("#no-results").toggle(content.length == 0)
         },"json");
      }
   </script>
{% endblock %}
{% block body %}
   <div class="row">
      <div class="col-sm">
         <h2>Search by</h2>

         <br />
         {{ form_start(form) }}

         {{ form_widget(form) }}
         <br />
         <button type="submit" class="btn btn-primary btn-block btn-lg">Search</button>
         <button type="reset" class="btn btn-light btn-block btn-lg">Clear Filters</button>
         {{ form_end(form) }}
      </div>
      <div class="col-sm">
         <h2>Results</h2>
         <br />
         <em style="display:none;" id="searching"><i class="fa fa-spinner fa-spin"></i> Searching</em>
         <em id="no-results"
                 {% if references|length != 0 %}
            style="display:none"
                 {% endif %}>No results found.</em>

         <ul id="results">
            {% for reference in references %}
               <li><a href="{{ path("reference_show", {"id": reference.id }) }}">{{ reference.cache|latin }}</a></li>
            {% endfor %}
         </ul>


      </div>
   </div>
{% endblock %}
